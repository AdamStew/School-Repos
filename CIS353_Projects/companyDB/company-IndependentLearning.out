SQL> -- ---------------------------------------------------------------
SQL> --
SQL> -- Name: Adam Stewart
SQL> --
SQL> /*(110) Using ROWNUM to limit the size of the result. (Notice that SQL and some systems use the LIMIT or TOP clauses. Oracle uses ROWNUM to accomplish similar tasks.)
SQL> Find the ssn, lname, and salary of only four employees.
SQL> */
SQL> SELECT E.SSN, E.LNAME, E.SALARY
  2  FROM Employee E
  3  WHERE ROWNUM <= 4;

SSN       LNAME               SALARY                                            
--------- --------------- ----------                                            
123456789 Smith                30000                                            
333445555 Wong                 40000                                            
999887777 Zelaya               25000                                            
987654321 Wallace              43000                                            

SQL> --
SQL> /*(115) TOP-N query.
SQL> Find the ssn, lname, and salary of the four highest paid employees.
SQL> */
SQL> SELECT *
  2  FROM (SELECT E.SSN, E.LNAME, E.SALARY
  3  	   FROM Employee E
  4  	   ORDER BY E.SALARY DESC)
  5  WHERE ROWNUM <= 4;

SSN       LNAME               SALARY                                            
--------- --------------- ----------                                            
888665555 Borg                 55000                                            
987654321 Wallace              43000                                            
333445555 Wong                 40000                                            
666884444 Narayan              38000                                            

SQL> --
SQL> /*(120) TOP-N query.
SQL> Find the ssn, lname, and salary of the four lowest paid employees
SQL> */
SQL> SELECT *
  2  FROM (SELECT E.SSN, E.LNAME, E.SALARY
  3  	   FROM Employee E
  4  	   ORDER BY E.SALARY)
  5  WHERE ROWNUM <= 4;

SSN       LNAME               SALARY                                            
--------- --------------- ----------                                            
999887777 Zelaya               25000                                            
987987987 Jabbar               25000                                            
453453453 English              25000                                            
123456789 Smith                30000                                            

SQL> --
SQL> /*(125) TOP-N query.
SQL> Find the lowest two salaries in the company.(Notice that in our database, the two lowest salaries are 25K and 30K.)
SQL> */
SQL> SELECT *
  2  FROM (SELECT DISTINCT E.SALARY
  3  	   FROM Employee E
  4  	   ORDER BY E.SALARY)
  5  WHERE ROWNUM <= 2;

    SALARY                                                                      
----------                                                                      
     25000                                                                      
     30000                                                                      

SQL> --
SQL> /*(130) TOP-N query.
SQL> For every employee whose salary is equal to one of the two lowest salaries, Find the ssn, lname, and salary.
SQL> */
SQL> SELECT E.SSN, E.LNAME, E.SALARY
  2  FROM Employee E
  3  WHERE E.SALARY IN (SELECT SALARY
  4  			FROM (SELECT DISTINCT E.SALARY
  5  			      FROM Employee E
  6  			      ORDER BY E.SALARY)
  7  			      WHERE ROWNUM <= 2);

SSN       LNAME               SALARY                                            
--------- --------------- ----------                                            
987987987 Jabbar               25000                                            
453453453 English              25000                                            
999887777 Zelaya               25000                                            
123456789 Smith                30000                                            

SQL> --
SQL> /*(135) RANK query
SQL> Find the rank of the salary 30000 among all salaries. (HINT: The ranks in our database are 1 for 25000, 4 for 30000, 5 for 38000, and so on.)
SQL> */
SQL> SELECT *
  2  FROM (SELECT E.SALARY, RANK() OVER (ORDER BY E.SALARY) AS RANK
  3  	   FROM Employee E)
  4  WHERE SALARY = 30000;

    SALARY       RANK                                                           
---------- ----------                                                           
     30000          4                                                           

SQL> --
SQL> /*(140) RANK query ... compare with the previous query.
SQL> Find the rank of the salary 31000 among all salaries.
SQL> */
SQL> SELECT *
  2  FROM (SELECT RANK(31000) WITHIN GROUP (ORDER BY E.SALARY) "Rank of $31000"
  3  	   FROM Employee E);

Rank of $31000                                                                  
--------------                                                                  
             5                                                                  

SQL> --
SQL> /*(145) DENSE RANK query
SQL> Find the dense rank of the salary 30000 among all salaries. Hint: The dense ranks in our database are 1 for 25000, 2 for 30000, 3 for 38000, and so on.
SQL> */
SQL> SELECT *
  2  FROM (SELECT E.SALARY, DENSE_RANK() OVER (ORDER BY E.SALARY) AS RANK
  3  	   FROM Employee E)
  4  WHERE SALARY = 30000;

    SALARY       RANK                                                           
---------- ----------                                                           
     30000          2                                                           

SQL> --
SQL> /*(150) DENSE RANK query ... compare with the previous query.
SQL> Find the dense rank of the salary 31000 among all salaries. Hint: The dense ranks in our database are 1 for 25000, 2 for 30000, 3 for 38000, and so on.
SQL> */
SQL> SELECT *
  2  FROM (SELECT DENSE_RANK(31000) WITHIN GROUP (ORDER BY E.SALARY) "Rank of $31000"
  3  	   FROM Employee E);

Rank of $31000                                                                  
--------------                                                                  
             3                                                                  

SQL> --
SQL> /*(155)HIERARCHICAL query (uses START WITH and CONNECT BY PRIOR)
SQL> Find pairs of SSN's such that the first SSN in the pair is that of an employee while the second SSN in the pair is that of his/her supervisor. Start with SSN 453453453.
SQL> Hint: The output of your query should be:
SQL> 
SQL> 453453453	     333445555
SQL> 333445555	     888665555
SQL> 888665555	     -
SQL> */
SQL> SELECT E.SSN, E.SUPER_SSN
  2  FROM EMPLOYEE E
  3  START WITH E.SSN = 453453453
  4  CONNECT BY E.SSN = PRIOR E.SUPER_SSN
  5  ORDER SIBLINGS BY E.SSN;

SSN       SUPER_SSN                                                             
--------- ---------                                                             
453453453 333445555                                                             
333445555 888665555                                                             
888665555                                                                       

SQL> ---------------------------------------------------------------
SQL> SET ECHO OFF
