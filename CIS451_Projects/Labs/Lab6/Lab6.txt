Adam Stewart
Josh Getter

Lab 6: Understanding Pipeline Operations

1. How many cycles does it take to fill the pipeline? (Notice that DLXview labels the cycles beginning with zero. To avoid ambiguity, fill in the blank: "In DLXview, the first cycle during which all the pipeline stages are busy is labeled __4__.") 

2. How many cycles does it take for the computer to execute the first instruction completely? 
The first instruction is completely finished after cycle 4.

3. What pipeline stage is the instruction and r6, r7, r8 in during cycle number 5 (i.e., the cycle labeled 5)? 
It's in the accessing memory stage (even though this particular function doesn't need to access memory).

4. During which cycle does the the processor begin computing the instruction and r12, r13, r14? (Make sure your answer clearly states "the xth cycle" or "the cycle labeled x"). 
It begins computing this instruction on the 4th cycle.

5. During which cycle does the the processor finish computing the instruction and r12, r13, r14? (Make sure your answer clearly states "the xth cycle" or "the cycle labeled x"). 
It is completely finished after the 8th cycle.

6. Which registers are being read during cycle 5 (the cycle labeled 5)?
Registers $R13 and $R14 are being read.

7. Which registers are being written during cycle 5 (the cycle labeled 5)?
Register $R3 is being written to.

8. Where does input to the main ALU come from during cycle 2 (the cycle labeled 2)?
It comes from an immediate value (from a mux) and a register (also through a mux).

9. Where does input to the main ALU come from during cycle 3 (the cycle labeled 3)?
These values both come from registers (into muxes).

10. What is the purpose of all of the nops at the end of the sample program?
The nops were to push the final command to the end of the CPU, that way the program wouldn’t end early.

11. How does the DLX pipeline architecture resolve this conflict?
It avoids this conflict by containing multiple adders, and two memories, that way each phase of the pipeline can access them, without conflicting with each other.

12. What purpose does this adder server?
The adder in the decode instruction calculates the address to jump to, should it need to branch.

13. Identify all pairs of instructions that have a data dependency. In particular identify all pairs of instructions (not necessarily adjacent) where the result of the second instruction depends directly on the result of the first.
and r6, r3, r7 depends on the instruction before it sub r3, r4, r5.  or r8, r9, r3 also needs r3 before it is put into a register from sub r3, r4, r5.  

14. Describe in your own words how the DLX hardware addresses this dependency problem. Your answer should be precise enough to convince me that you understand the mechanism used.
What the hardware does is that after the ALU executes, the value then goes backwards into 4 and 5 input muxes which keep track of the previous two executions, until the value is then safely stored into a register.  After that point, if it wanted those values, they’d be in the registers.

15. Trace through the progress of the fourth instruction in a manner similar to that used in the section above ("A simple pipelined program"). There is a "visual bug" or discrepancy that you will notice as you trace through the execution of this program. Identify it.
The visual bug is that the bottom mux right before the ALU, doesn’t show which input value it is using.

16. Step to cycle 4. Use KSnapshot (or another tool of your choice) to capture the main DLXview window. Print the snapshot and highlight the set of wires that shows how the result of sub r3, r4, r5 is routed directly to the main ALU.
See attached page.

17. Which value of r3 will be read if the DLX processor used the register file provided for Project 2? If the wrong value would be read, describe how you would properly coordinate the reading and writing of the registers.
We believe the wrong value would be read, since our register file in project 2 would have the value of r3 in front of the d-latch (register), however not actually inside it until the next clock cycle.  Since add r12, r13, r3 needs the value on THIS cycle, it would therefore get the wrong value.

18. Why must the add operation be delayed one cycle? Your answer should consider timing issues and functional units. Be sure to explain why forwarding cannot solve the problem.
The add operation must be delayed since in this case, we’re not looking for the result of the ALU, we’re looking for the result of accessing memory.  Since it takes another step to access memory, everything prior (if it wants to access the result) must be stalled in order for the value from memory to be available.  

19. Describe how hardware can detect a load data hazard. 
If the program see’s a load word operation destination being used, and directly after it as a source register uses it for an operation, then it needs to stall.

20. Why is the branch delay slot necessary? In other words, what would go wrong if we removed the nop? 
If the nop wasn’t present, it would start loading the instruction following bnez, instead of jumping back up to the LOOP destination.  The instruction following bnez shouldn’t be fetched until the loop breaks.

21. Suppose you had a smarter compiler. Explain what it could put in the branch delay slot instead of a nop.
Move one of our loop commands (like add r4, r4, 2) into the nop slot, that way, the instruction outside of the loop is delayed, but we also fulfill something inside the loop in the meantime.

22. Write an optimized assembly program incorporating your code adjustments. Your solution must still contain a loop.
add r4, r0, r0
add r5, r0, r0
addi r1, r0, 5
LOOP: subi r1, r1, 1
addi r4, r4, 2
bnez r1, LOOP
addi r5, r5, 10
add r6, r4, r5
nop
nop
nop
nop
trap #0
 
23. How many cycles does the original program take to assign the final result to register R6? (In other words, during which cycle is the instruction add r6, r4, r5 in the "write-back" phase?)
The original program takes 33 cycles total.  

24. How many cycles does your optimized assembly program take to do the same work?
Our optimized version took 28 cycles total.
